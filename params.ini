[Params]

# Name of the folder for storing training results
tag = tmp

epochs = 6_000
layers = 5
neurons_per_layer = 25
learning_rate = 0.0005
use_best_pinn = True

# Equation to use one of:
# - "delta" (Dirac delta on RHS)
# - "ad" (Advection-Diffusion)
# - "smooth" (Smooth, simple problem: -u'' = f' )
equation = smooth
# Type of test functions - one of "sin", "fem" or "mixed"
# "mixed" takes half of sin and half of fem 
# Number of fem can be changed like this: "mixed10" - 10 fem, rest is sin
test_func = fem
eps = 1.0
Xd = 0.0
# beta = 0.2

# Whether to compute error in each iteration will influence performance
compute_error = True
# Number of integration nodes
n_points_x = 2000
# Only FEM base functions. Number of integration nodes per interval where FEM basis is linear
n_points_x_fem = 20
# Number of integration nodes for computing error. Should be greater than n_points_x
n_points_error = 2000
# Only FEM base functions. Used  for computing NORM (error is calcualted with "n_points_error")
n_points_error_fem = 20
# Number of test functions
n_test_func = 20
# Note: When using FEM test functions loss and norm rules ARE INGORED! 
# Gaussian quadrature rule is used instead!
# Integration rule for loss function. One of "trapz", "midpoint". "simpson" DOES NOT WORK
integration_rule_loss = trapz
# ntegration rule for calculating norm. One of "trapz", "midpoint" or "simpson".
integration_rule_norm = trapz
# Integration rule for calculating error. One of "trapz", "midpoint" or "simpson".
integration_rule_error = trapz
# Whether to divide the loss (and norm) by number of test functions
divide_by_test = False

atol = 1e-22
rtol = 1e-22
